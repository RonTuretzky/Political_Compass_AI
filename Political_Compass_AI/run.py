# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/run.ipynb.

# %% auto 0
__all__ = ['db', 'tokenizer', 'text_pipeline', 'label_pipeline', 'train_iter', 'test_iter', 'vocab', 'device', 'dataloader',
           'num_class', 'vocab_size', 'emsize', 'model', 'EPOCHS', 'LR', 'BATCH_SIZE', 'run_ledger', 'criterion',
           'optimizer', 'scheduler', 'function', 'total_accu', 'train_dataset', 'test_dataset', 'num_train',
           'split_train_', 'split_valid_', 'train_dataloader', 'valid_dataloader', 'test_dataloader', 'first_flag',
           'accu_test', 'out']

# %% ../nbs/run.ipynb 0
from torchtext.data.utils import get_tokenizer
from .data_processing import return_iters
from .data_processing import yield_tokens
from .data_processing import collate_batch
from .model import TextClassificationModel
from .training import train
from .training import evaluate
from torchtext.data.functional import to_map_style_dataset
from torchtext.vocab import build_vocab_from_iterator
from torch.utils.data import DataLoader
from torch.utils.data.dataset import random_split
import time
import torch

global db
db = "../uniqueDB.txt"
tokenizer = get_tokenizer('basic_english')
text_pipeline = lambda x: vocab(tokenizer(x))
label_pipeline = lambda x: int(x) - 1
train_iter, test_iter = return_iters(db)
vocab = build_vocab_from_iterator(yield_tokens(train_iter), specials=["<unk>"])
vocab.set_default_index(vocab["<unk>"])
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
train_iter, test_iter = return_iters(db)
dataloader = DataLoader(train_iter, batch_size=8, shuffle=False, collate_fn=collate_batch)
train_iter, test_iter = return_iters(db)
num_class = len(set([label for (label, text) in train_iter]))
vocab_size = len(vocab)
emsize = 128
model = TextClassificationModel(vocab_size, emsize, num_class).to(device)
EPOCHS = 20
LR = 5
BATCH_SIZE = 32
run_ledger = open("Run_Ledger.txt", 'a')
criterion = torch.nn.CrossEntropyLoss()
# optimizer = torch.optim.SGD(model.parameters(), lr=LR)
optimizer = torch.optim.Adagrad(model.parameters(), lr=LR)
scheduler = torch.optim.lr_scheduler.StepLR(optimizer, 1.0, gamma=0.1)
function = "Linear with  weight init"
_optim = "Adamgrad"
total_accu = None
train_iter, test_iter = return_iters(db)

train_dataset = to_map_style_dataset(train_iter)
test_dataset = to_map_style_dataset(test_iter)
num_train = int(len(train_dataset) * 0.95)
split_train_, split_valid_ = \
    random_split(train_dataset, [num_train, len(train_dataset) - num_train])

train_dataloader = DataLoader(split_train_, batch_size=BATCH_SIZE,
                              shuffle=True, collate_fn=collate_batch)
valid_dataloader = DataLoader(split_valid_, batch_size=BATCH_SIZE,
                              shuffle=True, collate_fn=collate_batch)
test_dataloader = DataLoader(test_dataset, batch_size=BATCH_SIZE,
                             shuffle=True, collate_fn=collate_batch)
first_flag = True
for epoch in range(1, EPOCHS + 1):
    epoch_start_time = time.time()
    train(train_dataloader, model, optimizer, epoch)
    accu_val = evaluate(valid_dataloader, model)
    if total_accu is not None and total_accu > accu_val:
        scheduler.step()
    else:
        total_accu = accu_val
    if first_flag:
        run_ledger.write("Database file: " + db + "\t" + "Epochs:" + str(EPOCHS) + "\t" + "LR: " + str(
            LR) + "\t" + "Batch Size: " + str(BATCH_SIZE) + "\tinit accu_val:" + str(accu_val) + "\n")
        first_flag = False
    print('-' * 59)
    print('| end of epoch {:3d} | time: {:5.2f}s | '
          'valid accuracy {:8.3f} '.format(epoch,
                                           time.time() - epoch_start_time,
                                           accu_val))
    print('-' * 59)
run_ledger.write("Final accu:\t" + str(accu_val) + "\n\n")
accu_test = evaluate(test_dataloader,model)
out = 'test accuracy {:8.3f}'.format(accu_test)
print(out)
run_ledger.write(out + "\tfunction:" + function + "\tOptimzer:" + _optim + '\n')
run_ledger.close()
#torch.save(model.state_dict(), <path_to>)
# model.load_state_dict(torch.load(<path_to>))

